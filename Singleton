class Organization:
    """
    Шаблон одиночка для хранения и управления свойствами модели: организация.
    """

    _instance = None

    def __new__(cls, *args, **kwargs):
        """
        Метод для создания экземпляра класса.
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._code = None
            cls._instance._name = None
            cls._instance._address = None
            cls._instance._postal_code = None
        return cls._instance

    def set_code(self, code):
        """
        Устанавливает код организации.
        """
        self._code = code

    def get_code(self):
        """
        Возвращает код организации.
        """
        return self._code

    def set_name(self, name):
        """
        Устанавливает наименование организации.
        """
        self._name = name

    def get_name(self):
        """
        Возвращает наименование организации.
        """
        return self._name

    def set_address(self, address):
        """
        Устанавливает адрес организации.
        """
        self._address = address

    def get_address(self):
        """
        Возвращает адрес организации.
        """
        return self._address

    def set_postal_code(self, postal_code):
        """
        Устанавливает почтовый индекс организации.
        """
        self._postal_code = postal_code

    def get_postal_code(self):
        """
        Возвращает почтовый индекс организации.
        """
        return self._postal_code

    def __str__(self):
        """
        Представление объекта в виде строки.
        """
        return f"Organization(code={self._code}, name={self._name}, address={self._address}, postal_code={self._postal_code})"


import unittest

class OrganizationTest(unittest.TestCase):
    """
    Тестовый класс для проверки работы шаблона одиночка Organization.
    """

    def test_singleton(self):
        """
        Проверка создания единственного экземпляра.
        """
        org1 = Organization()
        org2 = Organization()
        self.assertEqual(org1, org2)

    def test_set_and_get_properties(self):
        """
        Проверка установки и получения свойств организации.
        """
        org = Organization()
        org.set_code("12345")
        org.set_name("ООО \"Тестовая организация\"")
        org.set_address("г. Черемхово, ул. Детская, д. 32")
        org.set_postal_code("123456")

        self.assertEqual(org.get_code(), "12345")
        self.assertEqual(org.get_name(), "ООО \"Тестовая организация\"")
        self.assertEqual(org.get_address(), "г. Черемхово, ул. Детская, д. 32")
        self.assertEqual(org.get_postal_code(), "123456")

    def test_str_representation(self):
        """
        Проверка строкового представления объекта.
        """
        org = Organization()
        org.set_code("12345")
        org.set_name("ООО \"Тестовая организация\"")
        org.set_address("г. Черемхово, ул. Детская, д. 32")
        org.set_postal_code("123456")

        expected_string = "Organization(code=12345, name=ООО \"Тестовая организация\", address=г. Черемхово, ул. Детская, д. 32, postal_code=123456)"
        self.assertEqual(str(org), expected_string)


if __name__ == '__main__':
    unittest.main()
